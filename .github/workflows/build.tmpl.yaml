on:
  push:
    tags:
      - "v*.*.*"
jobs:
  package:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: {{"${{ matrix.os }}"}}
    steps:
      - name: Install Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set Version
        run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Get Wails dependencies
        run: sudo apt update && sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev
        if: matrix.os == 'ubuntu-latest'
      - name: Get Wails
        run: go get -u github.com/wailsapp/wails/cmd/wails
      - name: Build package macOS
        run: |
          export PATH=${PATH}:$(go env GOPATH)/bin
          echo "building on {{"${{ matrix.os }}"}}"
          mkdir -p ~/.wails
          cp wails.json ~/.wails/
          export LOG_LEVEL=debug
          export GODEBUG=1
          wails build -p
          echo "converting .app into a .dmg"
          npm install -g appdmg
          appdmg dmg-spec.json {{.BinaryName}}.dmg
          zip {{.BinaryName}}.zip {{.BinaryName}}.dmg
        if: matrix.os == 'macos-latest'
      - name: Build package linux
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          echo "building on {{"${{ matrix.os }}"}}"
          echo {{"${{ env.GITHUB_REF }}"}}
          echo {{"${{ env.GITHUB_HEAD_REF }}"}}
          mkdir -p ~/.wails
          cp wails.json ~/.wails/
          export LOG_LEVEL=debug
          export GODEBUG=1
          wails build
          tar -czvf {{.BinaryName}}.tar.gz ./build/{{.BinaryName}}
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy*.AppImage
          ls ./
          ./linuxdeploy*.AppImage --appdir AppDir --executable ./build/{{.BinaryName}} --desktop-file={{.BinaryName}}.AppImage.desktop --icon-file=appicon--512.png --output appimage
        if: matrix.os == 'ubuntu-latest'
      - name: Build package windows
        run: |
          $GP = (go env GOPATH)
          $env:path = "$env:path;$GP\bin"
          echo "building on {{"${{ matrix.os }}"}}"
          New-Item -ItemType directory -Path "$HOME\.wails" -Force
          Copy-Item -Path "$PWD\wails.json" -Destination "$HOME\.wails\wails.json"
          choco install mingw
          wails build -p
          Compress-Archive -Path .\build\{{.BinaryName}}* -DestinationPath .\{{.BinaryName}}.zip
        if: matrix.os == 'windows-latest'
      - name: upload artifact macOS
        uses: actions/upload-artifact@v4
        with:
          name: '{{.BinaryName}}-macOS'
          path: '{{.BinaryName}}.zip'
        if: matrix.os == 'macos-latest'
      - name: upload artifact linux
        uses: actions/upload-artifact@v4
        with:
          name: '{{.BinaryName}}-linux'
          path: '{{.BinaryName}}.tar.gz'
        if: matrix.os == 'ubuntu-latest'
      - name: upload artifact linux appimage
        uses: actions/upload-artifact@v4
        with:
          name: '{{.BinaryName}}-linux-appimage'
          path: '{{.BinaryName}}-{{"${{ env.VERSION }}"}}-x86_64.AppImage'
        if: matrix.os == 'ubuntu-latest'
      - name: upload artifact windows
        uses: actions/upload-artifact@v1
        with:
          name: '{{.BinaryName}}-windows'
          path: '{{.BinaryName}}.zip'
        if: matrix.os == 'windows-latest'

  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: {{"${{ secrets.GITHUB_TOKEN }}"}}
        with:
          tag_name: {{"${{ github.ref }}"}}
          release_name: {{"${{ github.ref }}"}}
          draft: true
          prerelease: true
      - name: Download macOS package
        uses: actions/download-artifact@v1
        with:
          name: '{{.BinaryName}}-macOS'
      - name: Upload macOS package to release
        id: upload-macOS-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: {{"${{ secrets.GITHUB_TOKEN }}"}}
        with:
          upload_url: '{{"${{ steps.create_release.outputs.upload_url }}"}}'
          asset_path: './{{.BinaryName}}-macOS/{{.BinaryName}}.zip'
          asset_name: '{{.BinaryName}}_{{"${{ github.ref }}"}}_macOS.zip'
          asset_content_type: application/octet-stream
      - name: Download linux package
        uses: actions/download-artifact@v1
        with:
          name: '{{.BinaryName}}-linux'
      - name: Upload Linux package to release
        id: upload-linux-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: {{"${{ secrets.GITHUB_TOKEN }}"}}
        with:
          upload_url: {{"${{ steps.create_release.outputs.upload_url }}"}}
          asset_path: './{{.BinaryName}}-linux/{{.BinaryName}}.tar.gz'
          asset_name: '{{.BinaryName}}_{{"${{ github.ref }}"}}_linux_x86_64.tar.gz'
          asset_content_type: application/octet-stream
      - name: Download windows package
        uses: actions/download-artifact@v1
        with:
          name: '{{.BinaryName}}-windows'
      - name: Upload Windows package to release
        id: upload-windows-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: {{"${{ secrets.GITHUB_TOKEN }}"}}
        with:
          upload_url: '{{"${{ steps.create_release.outputs.upload_url }}"}}'
          asset_path: './{{.BinaryName}}-windows/{{.BinaryName}}.zip'
          asset_name: '{{.BinaryName}}_{{"${{ github.ref }}"}}_windows_x86_64.zip'
          asset_content_type: application/octet-stream
